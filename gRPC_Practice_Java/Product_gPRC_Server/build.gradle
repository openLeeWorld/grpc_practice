buildscript { // 말 그대로 빌드하기 위한 스크립트 생성
    repositories {
        mavenCentral()
    } // 빌드 스크립트 의존성 해결
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
    } // gradle protocol buffer 플러그인
}

plugins {
    id 'application'
    id 'java'
    id 'com.google.protobuf' version '0.9.1'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.grpc:grpc-netty-shaded:1.54.0'
    implementation 'io.grpc:grpc-protobuf:1.54.0'
    implementation 'io.grpc:grpc-stub:1.54.0'
    implementation 'com.google.protobuf:protobuf-java:3.9.2'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.21.7"
    } // proto compiler version
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.54.0'
        } // protobuf Java execution version
    }
    generateProtoTasks { // Protobuf 플러그인이 제공하는 작업들 설정
        all()*.plugins { // 모든 proto 파일에 모든 plugins 블록 적용
            grpc {} // gPRC 코드 생성을 위한 플러그인 설정 정의(빈 블록: 기본 설정)
        } 
    } //  Protobuf 및 gRPC 플러그인을 사용하여 .proto 파일을 처리하고, 
      //  gRPC 서비스와 관련된 코드를 생성하는 데 사용됩니다
}

sourceSets { // 컴파일된 gRPC 파일들이 ide에서 위치하는 곳
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

application {
    mainClass = 'ecommerce.ProductInfoServer'
    startScripts.enabled = false // .sh, .bat등의 실행 스크립트 생성 x
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes('Main-Class': application.mainClass)
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        // 런타임에 필요한 클래스 파일을 모두 포함
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}